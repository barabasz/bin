#!/bin/zsh

# remote files
varbls="https://raw.githubusercontent.com/barabasz/config/main/zsh/.zsh_env"
fnfile="https://raw.githubusercontent.com/barabasz/config/main/zsh/.zsh_functions"
colors="https://raw.githubusercontent.com/barabasz/bin/main/lib/colors.sh"
printf="https://raw.githubusercontent.com/barabasz/bin/main/lib/print.sh"
github="https://raw.githubusercontent.com/barabasz/bin/main/install"

# loading variables and functions
source <(curl -fsSL $varbls) && echo "Variables loaded." || { echo "Error loading variables."; return 1; }
source <(curl -fsSL $fnfile) && echo "Functions loaded." || { echo "Error loading functions."; return 1; }
source <(curl -fsSL $colors) && echo "Colors loaded." || { echo "Error loading colors lib."; return 1; }
source <(curl -fsSL $printf) && echo "Print loaded." || { echo "Error loading print lib."; return 1; }

printf "\n\n-------------------------------\n"
printf "${redbi}System base installation script${clear}"
printf "\n-------------------------------\n\n"

# forcing sudo password
sudo echo > /dev/null

# create base directories
printhead 'Creating base directories...'
mkdir -p $HOME/.cache
mkdir -p $HOME/.config
mkdir -p $HOME/.local
mkdir -p $HOME/.tmp

# generate locale (Ubuntu/Debian)
if [[ "$(osname)" != "macos" ]]; then
    printhead 'Installing locales...'
    source <(curl -fsSL $github/install-locales) 2>/dev/null
fi

# setting timezone
if [[ "$(osname)" != "macos" ]]; then
    printhead 'Setting timezone...'
    if [[ "$(cat /etc/timezone | grep -o 'Warsaw')" != "Warsaw" ]]; then
        sudo timedatectl set-timezone Europe/Warsaw
        sudo dpkg-reconfigure -f noninteractive tzdata
    else
        echo "Timezone: $(cat /etc/timezone)"
    fi
fi

# update and upgrade
printhead 'Updating system...'
sysupdate
printinfo 'System updated.'

# Git
printhead 'Installing git...'
source <(curl -fsSL $github/install-git)

# GitHub CLI (gh)
printhead 'Installing gh...'
source <(curl -fsSL $github/install-gh)

# clone main repositories
printhead 'Cloning setup repositories...'
source <(curl -fsSL $github/install-repos)

# symlinks
printhead 'Creating symlinks...'
source <(curl -fsSL $github/install-symlinks)

# zsh
if [[ ! "$(osname)" == "macos" ]]; then
    printhead 'Installing zsh...'
    source <(curl -fsSL $github/install-zsh)
fi

#brew
printhead 'Installing brew...'
install-brew
if [[ -f /opt/homebrew/bin/brew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
elif [[ -f /home/linuxbrew/.linuxbrew/bin/brew ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# certificates
printhead 'Installing certificates...'
install-certs

# Basic brew libraries
printhead 'Installing brew core packages...'
extscript $github/install-brew-core

# ncurses - Text-based UI library
printhead 'Installing ncurses...'
extscript $github/install-ncurses

# gcc  - GNU compiler collection
printhead 'Installing gcc...'
extscript $github/install-gcc

# disable NEEDRESTART prompt
if [[ "$(osname)" == "ubuntu" ]]; then
    printhead 'Setting NEEDRESTART_MODE to auto...'
    disable-needrestart
fi

# set locale
if [[ "$(osname)" != "macos" ]]; then
    printhead 'Setting locale...'
    set-locale
fi

# acl - Commands for manipulating POSIX access control lists
if [[ "$(osname)" != "macos" ]]; then
    printhead 'Installing acl...'
    install-acl
fi

# cmake  - Cross-platform make
printhead 'Installing cmake...'
install-cmake

# Collection of Linux utilities
if [[ ! "$(osname)" == "macos" ]]; then
    printhead 'Installing util-linux...'
    install-util-linux
fi

# archivers
printhead 'Installing archivers...'
install-archivers

# minimize login info
if [[ ! "$(osname)" == "macos" ]]; then
    printhead 'Minimizing login info...'
    minimize-login-info
    echo 'Done.'
fi

# remove snap (Ubuntu)
if [[ "$(osname)" == "ubuntu" ]]; then
    printhead 'Removing snap...'
    remove-snap
fi

# zsh
if [[ ! "$(osname)" == "macos" ]]; then
    printhead 'Installing zsh...'
    install-zsh
fi

# omz
printhead 'Installing oh-my-zsh...'
install-omz

# omp
printhead 'Installing Oh My Posh..'
install-omp

printhead 'Core installation completed.'
printhead 'Reload terminal to apply changes.'
