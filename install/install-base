#!/bin/zsh

# remote files
env_file="https://raw.githubusercontent.com/barabasz/config/main/zsh/.zvars"
lib_file="https://raw.githubusercontent.com/barabasz/lib/main/_all.sh"
lin_file="https://raw.githubusercontent.com/barabasz/lib/main/_linux.sh"
ghub_dir="https://raw.githubusercontent.com/barabasz/bin/main/install"

# main loading function
function source_remote_lib() {
    local url=$1 name=$2 file_content=""
    file_content=$(wget -q -O - $url)
    [[ $? -ne 0 ]] && { echo "Error getting $name ($url)."; return 1; }
    source /dev/stdin <<< "$file_content"
    [[ $? -ne 0 ]] && { echo "Error sourcing $name."; return 1; }
    echo "$name successfully loaded."
}

# loading variables and functions (using wget for compatibility)
source_remote_lib $env_file "Environment variables" || exit 1 
source_remote_lib $lib_file "Library functions" || exit 1 
source_remote_lib $lin_file "Linux functions" || exit 1

printtitle 'Installation of base system components'
log::warn "This script will install base system components."
prompt_continue || exit 0

# installing sudo if not installed (Debian)
source_remote $ghub_dir/install-sudo

# forcing sudo password for the rest of the script
sudo echo > /dev/null

# creating base directories
source_remote $ghub_dir/install-dirs

# generate locale (Ubuntu/Debian)
source_remote $ghub_dir/install-locales

# setting timezone
set-warsaw-timezone

# update and upgrade
sysupdate

# Git
source_remote $ghub_dir/install-git

# clone main repositories
source_remote $ghub_dir/install-repos

# symlinks
source_remote $ghub_dir/install-symlinks

# zsh
source_remote $ghub_dir/install-zsh

# brew
install-brew

# certificates
install-certs

# Basic brew libraries
install-brew-core

# ncurses - Text-based UI library
install-ncurses

# gcc  - GNU compiler collection
printhead 'Installing gcc...'
extscript $ghub_dir/install-gcc

# disable NEEDRESTART prompt
if [[ "$(osname)" == "ubuntu" ]]; then
    printhead 'Setting NEEDRESTART_MODE to auto...'
    disable-needrestart
fi

# acl - Commands for manipulating POSIX access control lists
if [[ "$(osname)" != "macos" ]]; then
    printhead 'Installing acl...'
    install-acl
fi

# cmake  - Cross-platform make
printhead 'Installing cmake...'
install-cmake

# Collection of Linux utilities
if [[ ! "$(osname)" == "macos" ]]; then
    printhead 'Installing util-linux...'
    install-util-linux
fi

install-gzip
install-7zip

# minimize login info
if [[ ! "$(osname)" == "macos" ]]; then
    printhead 'Minimizing login info...'
    minimize-login-info
    echo 'Done.'
fi
touch "$HOME/.hushlogin"

# remove snap (Ubuntu)
if [[ "$(osname)" == "ubuntu" ]]; then
    printhead 'Removing snap...'
    remove-snap
fi

# omz
printhead 'Installing oh-my-zsh...'
install-omz

# omp
printhead 'Installing Oh My Posh..'
install-omp

install-curl
install-bc
install-tmux
install-gh
install-repos-priv

printhead 'Core installation completed.'
printhead 'Reload terminal to apply changes.'

