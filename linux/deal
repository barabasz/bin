#!/usr/bin/env php
<?php

readonly class Card
{
    public int $s;
    public int $r;
    public string $suite;
    public string $rank;
    public string $rankname;
    public string $fullname;
    public string $icon;
    public string $ir;
    public string $ri;

    public function __construct(int $suite, int $rank)
    {
        $this->s = $suite;
        $this->r = $rank;
        $this->suite = $this->get_card_suite($suite);
        $this->rank = $this->get_card_rank($rank);
        $this->rankname = $this->get_card_rankname($rank);
        $this->fullname = $this->rankname . ' of ' . $this->suite;
        $this->icon = $this->get_card_icon($suite);
        $this->ir = $this->icon . $this->rank;
        $this->ri = $this->rank . $this->icon;
    }

    private function get_card_suite(int $suite): string
    {
        return match ($suite) {
            1  => 'clubs',
            2  => 'diamonds',
            3  => 'hearts',
            4  => 'spades',
        };
    }

    private function get_card_icon(int $suite): string
    {
        return match ($suite) {
            1  => '♣',
            2  => '♦',
            3  => '♥',
            4  => '♠',
        };
    }

    private function get_card_rank(int $rank): string
    {
        return match ($rank) {
            1  => 'A',
            2  => '2',
            3  => '3',
            4  => '4',
            5  => '5',
            6  => '6',
            7  => '7',
            8  => '8',
            9  => '9',
            10 => '10',
            11 => 'J',
            12 => 'Q',
            13 => 'K',
        };
    }

    private function get_card_rankname(int $rank): string
    {
        return match ($rank) {
            1  => 'ace',
            2  => 'two',
            3  => 'three',
            4  => 'four',
            5  => 'five',
            6  => 'six',
            7  => 'seven',
            8  => 'eight',
            9  => 'nine',
            10 => 'ten',
            11 => 'jack',
            12 => 'queen',
            13 => 'king',
        };
    }

}

class Hand
{
    private array $hand;

    public function __construct(Deck $deck, int $cards)
    {
        $this->hand = $deck->deal($cards);
    }

    public function show(int $card = 0): string
    {
        if ($card == 0) {
            $string = '';
            foreach ($this->hand as $value) {
                $string .= $value->ir . ' ';
            }
            return $string . PHP_EOL;
        } else {
            return $this->hand[$card-1]->ir;
        }
    }

}

class Deck
{
    private array $deck;

    public function __construct()
    {
        $this->deck = $this->make_deck();
    }

    private function make_deck(): array
    {
        $deck = [];
        for ($s = 1; $s < 5; $s++) { 
            for ($r = 1; $r < 14; $r++) { 
                $deck[$s][$r] = new Card($s, $r);
            }
        }
        return $deck;
    }

    public function deal(int $i = 1): array|bool
    {
        if (array_sum(array_map("count", $this->deck)) >= $i) {
            $hand = [];
            while (($a = $a ?? 1) <= $i) {
                $s = rand(1, 4);
                $r = rand(1, 13);
                
                if ($this->deck[$s][$r] ?? false) {
                    $hand[] = $this->deck[$s][$r];
                    unset($this->deck[$s][$r]);
                    $a++;
                }             
            }
            return $hand;
        } else {
            return false;
        }
    }

    public function show(): string
    {
        $string = '';
        foreach ($this->deck as $i) {
            foreach ($i as $j) {
                $string .= $j->ir . ' ';
            }
            $string .=  PHP_EOL;
        }
        return $string . PHP_EOL;
    }

}

$deck = new Deck;
$hand1 = new Hand($deck, 5);
echo $hand1->show();

$hand2 = new Hand($deck, 5);
echo $hand2->show();

$hand3 = new Hand($deck, 5);
echo $hand3->show();

$hand4 = new Hand($deck, 5);
echo $hand4->show();

echo PHP_EOL;
echo $deck->show();
echo PHP_EOL;